extern crate mandelrust;
extern crate graphics;
extern crate glium;
extern crate glium_graphics;
extern crate shader_version;
extern crate piston;
extern crate glutin_window;
#[macro_use(lift)]
extern crate carboxyl;
extern crate carboxyl_window;
extern crate benzene;
#[macro_use]
extern crate rust_mpfr;
extern crate image;
extern crate palette;
extern crate input;
extern crate rayon;
extern crate num;

mod driver;
pub mod mandelbrot;
mod app;

use driver::Driver2d;
use mandelbrot::CanvasSize;
use piston::window::WindowSettings;
use benzene::{Driver, Component, interpret, start};
use rust_mpfr::mpfr::*;

fn settings() -> WindowSettings {
    WindowSettings::new("Mandelrust", (900, 600))
}

fn main() {
    //    let x_ = "-1.76870695318726651071950263928143062352581392950029771945562562581784034492593119464925257051353413657830156260917461241276335535649981545679545736655853251171199524334998581456239724542574419777079205190177147490373943683285987419337879733443298267355851315274206640605705174555989962722897028381480137802491466571592505361450504243256343641174948787082156227086080294867583590933731248687671280178560301882371844573633356199814878977152262848188245017487918528481689455014118193830986122694827641882984308576488723653486095963827510257438324709156000697160063026348906541518854803772232280886632465875786226189123593291497030204166229665725956042858548418152921471284669610634801745187587835560749469826570221738994691872187767571667414679401040969123371288316744806709490565969974431712412570342563215339366098904335626868758867647382203217885548035063474117619658987806477400777197162891045562186934637036762457065900576533346445265077180881214641450683133575150605635888672753519133542583711383659813252053119975253152066855877860927853504163986111254836472194669356821226207129866636326058152564418447900420232504583830586671527158776086472332275088714703282795141391088165063659447659313463169692055725314235551425589244724856884973346731107837246038225623216885755492359906105382788066212421438898685999358208800716374669763075537366368426884621101712973691744674107965353428121177515481511985454902841774145267354198232731768065819290951677105680466513879683619269866174264217264908674968";
    //    let y_ = "0.00186868668622798817613064730795458150873816758324144959471641155944240582312190708050267604274785750886498348231797313069119766083707198097446338682902345095681641903547272924196814713603865541664951380791882647618414106462304434576125893490792318881021874597302601718606897779218613926706926594821962339283807409475828350823078832910133997885765429076310442569293184418862857918577024392223524703509768100087862124430619666288766687225374360136431131718769267692719348587016072908818387414792848703890584502552050353227786079724678650245689900558979515594661914991509288095906817276599632306101054070159301509930858690249362542964784806909292686775953266094970595107895096693983834395281286063455503932033230582212271411665508222512911352691594134972321998357749047134362618998819439134512846271197284283797203511990633544364965354330393758920056690475042861213274161809421305490085201169524618265606881341325234973975762981351349468824311110909216461408545284175352701914247555567371499970881796427454034235334088839276373236860210745554584776668111543107714568851572198016632514499572655264045234881358655041028081820579365242092353558501791323246352400168055707772139598069665068932724878495318029022366246770387590962951662263634564146256965160129795505849364111375115943133677417586954578111583168788329049738325897438710817782646430302688823949845680990805335823169959685089184125438006235215923178751463372070121875231285795605465072366638112212706821151769738781483864598729455241408628";
    //    let zoom_ = "6.2726136824206070700569600396441e1489";
    let x_ = "-1.0000000000000";
    let y_ = "0.0";
    let zoom_ = "1";
    let prec: usize = (x_.len() as f64 / 2f64.log(10f64)).ceil() as usize;
    let x = Mpfr::new2_from_str(prec, x_, 10).expect("Wrong literal");
    let y = Mpfr::new2_from_str(prec, y_, 10).expect("Wrong literal");
    let zoom = Mpfr::new2_from_str(prec, zoom_, 10).expect("Wrong literal");
    println!("Initial precision: {}", (&x * &y + &zoom).get_prec());

    let canvas = CanvasSize::new_from_center(400, 200, [x, y], zoom).set_prec(128);
    let max = 1000u32;

    let mut driver2d = Driver2d::new(settings());

    let output = start(Component {
                           init: app::init(canvas, max),
                           update: app::update,
                           view: app::view,
                           effect: |_, _| None,
                       },
                       interpret(driver2d.output(), app::intent));

    driver2d.run(output);
}
